package Net::Async::Spotify::API::Generated::[% api_name %];

use strict;
use warnings;

use mro;
use parent qw(Net::Async::Spotify::API::Base);

use Future::AsyncAwait;

=head1 NAME
 
Net::Async::Spotify::API::Generated::[% api_name %] - Package representing Spotify [% api_name %] API
 
=head1 DESCRIPTION
 
Autogenerated module.
Based on https://developer.spotify.com/documentation/web-api/reference/#reference-index
Check C<crawl-api-doc.pl> for more information.
 
=head1 METHODS

=cut


[% FOREACH ep IN endpoints.keys.sort -%]
=head2 [% ep %]

[% ep %] - [% endpoints.$ep.short_description %]

[% endpoints.$ep.long_description %]

with Request details being:

[% FOREACH req_param IN endpoints.$ep.request.keys.sort -%]
=head3 [% req_param %]

=over 4 

[% FOREACH param IN endpoints.$ep.request.$req_param.keys.sort -%]
=item [% param %]

Type: [% endpoints.$ep.request.$req_param.$param.type %] | Required: [% endpoints.$ep.request.$req_param.$param.required %]
[% endpoints.$ep.request.$req_param.$param.description %]

[% END -%]
=back

[% END -%]
and Response Objects being:

[% FOREACH res_obj IN endpoints.$ep.response.objects -%]
- [% res_obj %]
[% END %]

[% endpoints.$ep.response.raw %]

=cut

async sub [% ep %] {
    my ($self, %args) = @_;

    my $request->{method} = '[% endpoints.$ep.method %]';
    $request->{uri}    = '[% endpoints.$ep.uri %]';
    $request->{param}  = {
[% FOREACH req_param IN endpoints.$ep.request.keys.sort -%]
        [% req_param %] => {
[% FOREACH param IN endpoints.$ep.request.$req_param.keys.sort -%]
            '[% param %]' => {
                type     => '[% endpoints.$ep.request.$req_param.$param.type %]',
                required => '[% endpoints.$ep.request.$req_param.$param.required %]',
            },
[% END -%]
        },
[% END -%]
    };
    my $response_objs = [
[% FOREACH res_obj IN endpoints.$ep.response.objects -%]
        '[% res_obj %]',
[% END %]
    ];

    await $self->call_api($request, $response_objs, %args);
}

[% END -%]
1;
