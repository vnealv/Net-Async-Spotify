package Net::Async::Spotify::API::Generated::Personalization;

use strict;
use warnings;

use mro;
use parent qw(Net::Async::Spotify::API::Base);

use Future::AsyncAwait;

=head1 NAME
 
Net::Async::Spotify::API::Generated::Personalization - Package representing Spotify Personalization API
 
=head1 DESCRIPTION
 
Autogenerated module.
Based on https://developer.spotify.com/documentation/web-api/reference/#reference-index
Check C<crawl-api-doc.pl> for more information.
 
=head1 METHODS

=cut


=head2 get_users_top_artists_and_tracks

get_users_top_artists_and_tracks - Get a User&#39;s Top Artists and Tracks

Get the current user’s top artists or tracks based on calculated affinity.

with Request details being:

=head3 header

=over 4 

=item Authorization

Type: string | Required: required
A valid access token from the Spotify Accounts service: see the <a href="/documentation/general/guides/authorization-guide/">Web API Authorization Guide</a> for details. The access token must have been issued on behalf of the current user.<br />Getting details of a user’s top artists and tracks requires authorization of the <code class="highlighter-rouge">user-top-read</code> scope. See <a href="/documentation/general/guides/authorization-guide/#list-of-scopes">Using Scopes</a>.

=back

=head3 path_parameter

=over 4 

=item type

Type: string | Required: required
The type of entity to return. Valid values: <code class="highlighter-rouge">artists</code> or <code class="highlighter-rouge">tracks</code>

=back

=head3 query_parameter

=over 4 

=item limit

Type: integer | Required: optional
The number of entities to return. Default: 20. Minimum: 1. Maximum: 50. For example: <code class="highlighter-rouge">limit=2</code>

=item offset

Type: integer | Required: optional
The index of the first entity to return. Default: 0 (i.e., the first track). Use with limit to get the next set of entities.

=item time_range

Type: string | Required: optional
Over what time frame the affinities are computed. Valid values: <code class="highlighter-rouge">long_term</code> (calculated from several years of data and including all new data as it becomes available), <code class="highlighter-rouge">medium_term</code> (approximately last 6 months), <code class="highlighter-rouge">short_term</code> (approximately last 4 weeks). Default: <code class="highlighter-rouge">medium_term</code>

=back

and Response Objects being:

- paging object


On success, the HTTP status code in the response header is <code class="highlighter-rouge">200 OK</code> and the response body contains a <a href="/documentation/web-api/reference/#object-pagingobject">paging object</a> of <a href="/documentation/web-api/reference/#object-artistobject">Artists</a> or <a href="/documentation/web-api/reference/#object-trackobject">Tracks</a>. On error, the header status code is an <a href="/documentation/web-api/#response-status-codes">error code</a> and the response body contains an <a href="/documentation/web-api/#response-schema">error object</a>.<a class="btn btn-sm btn-primary" href="/console/get-current-user-top-artists-and-tracks/?type=artists" target="_blank">Try in our Web Console</a>

=cut

async sub get_users_top_artists_and_tracks {
    my ($self, %args) = @_;

    my $request->{method} = 'GET';
    $request->{uri}    = 'https://api.spotify.com/v1/me/top/{type}';
    $request->{param}  = {
        header => {
            'Authorization' => {
                type     => 'string',
                required => 'required',
            },
        },
        path_parameter => {
            'type' => {
                type     => 'string',
                required => 'required',
            },
        },
        query_parameter => {
            'limit' => {
                type     => 'integer',
                required => 'optional',
            },
            'offset' => {
                type     => 'integer',
                required => 'optional',
            },
            'time_range' => {
                type     => 'string',
                required => 'optional',
            },
        },
    };
    my $response_objs = [
        'paging object',

    ];

    await $self->call_api($request, $response_objs, %args);
}

1;
